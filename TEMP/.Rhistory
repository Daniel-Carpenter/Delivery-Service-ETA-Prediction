# Clean data
df.train.base <- df.train.base %>%
# Ensure boolean variables are numeric
mutate(adwordsClickInfo.isVideoAd = as.numeric(adwordsClickInfo.isVideoAd) ) %>%
# Make sure dates are dates
mutate(date = as.Date(date),
visitStartTime = as_datetime(visitStartTime)
) %>%
# Ensure factor are factors
mutate(custId       = as.factor(custId),
sessionId    = as.factor(sessionId),
isMobile     = as.factor(isMobile),
isTrueDirect = as.factor(isTrueDirect),
newVisits    = as.factor(if_else(is.na(newVisits), 0, 1) ),
bounces      = as.factor(if_else(is.na(bounces),   0, 1)   ),
adwordsClickInfo.page      = as.factor(adwordsClickInfo.page),
adwordsClickInfo.isVideoAd = as.factor(adwordsClickInfo.isVideoAd)
)
df.train.base.numeric <- df.train.base %>%
# selecting all the numeric data
dplyr::select_if(is.numeric) %>%
# converting the data frame to tibble
as_tibble()
df.train.base.factor <- df.train.base %>%
#selecting all the numeric data
dplyr::select_if(is.factor) %>%
#converting the data frame to tibble
as_tibble()
# Function for data report
dataQualityReport <- function(df) {
# Function to remove any columns with NA
removeColsWithNA <- function(df) {
return( df[ , colSums(is.na(df)) == 0] )
}
# Create Comprehensive data report using skimr package
# This is done a bit piece-wise because PDF latex does not like the skimr package
# Very much. So Instead of printing `skim(df)`, I have to pull the contents manually
# Unfortunately. This is not an issue with html typically.
dataReport <- skim(df) %>%
rename_all(~str_replace(.,"skim_","")) %>%
arrange(type, desc(complete_rate) ) # sort data
# Filter to the class types
dataReport.numeric <- dataReport %>% filter(type == 'numeric') # numeric data
dataReport.factor  <- dataReport %>% filter(type == 'factor' ) # factor  data
# Remove columns that do not apply to this type of data -----------------------
## numeric data
dataReport.numeric <- removeColsWithNA(dataReport.numeric)  %>%
# Clean column names by removing numeric prefix,
rename_all(~str_replace(.,"numeric.",""))
## factor  data
dataReport.factor  <- removeColsWithNA(dataReport.factor ) %>%
# Clean column names by removing factor  prefix
rename_all(~str_replace(.,"factor.",""))
# Set up options for Display the reports
options(skimr_strip_metadata = FALSE)
options(digits=2)
options(scipen=99)
# Numeric report <- Get summary of data frame --------------------------------
# data frame stats
dfStats.num <- data.frame(Num_Numeric_Variables = ncol(df %>% select_if(is.numeric)),
Total_Observations    = nrow(df) )
# Now see individual column statistics
dfColStats.num <- dataReport.numeric %>%
dplyr::select(-type, -hist)
# Factor report <- Get summary of data frame --------------------------------
# Get summary of data frame
dfStats.factor <- data.frame(Num_Factor_Variables = ncol(df %>% select_if(is.factor)),
Total_Observations   = nrow(df) )
# Now see individual column statistics
dfColStats.factor <- dataReport.factor  %>%
dplyr::select(-type, -ordered)
# Return the data frames
return(list('dfStats.num'       = dfStats.num,
'dfColStats.num'    = dfColStats.num,
'dfStats.factor'    = dfStats.factor,
'dfColStats.factor' = dfColStats.factor))
}
# Get the factor and numeric reports
initialReport <- dataQualityReport(df.train.base)
# Numeric data frame stats
initialReport$dfStats.num %>% kable()
# Numeric column stats
initialReport$dfColStats.num %>%
kable() %>% kable_styling(font_size=7, latex_options = 'HOLD_position') # numeric data
# dataset by customer
df.train.base.byCustomer <- df.train.base %>%
group_by(across(sessionId)) %>%
summarise_if(is.numeric, sum)
# Get the outlier customers
revOutliers <- boxplot.stats(df.train.base.byCustomer[, 'revenue'])$out
knitr::opts_chunk$set(echo = TRUE)
# Packages --------
# Data Wrangling
library(tidyverse)
library(skimr)
library(lubridate) # dates
# Modeling
library(MASS)
library(caret) # Modeling variants like SVM
library(earth) # Modeling with Mars
library(pls)   # Modeling with PLS
library(glmnet) # Modeling with LASSO
# Aesthetics
library(knitr)
library(cowplot)  # multiple ggplots on one plot with plot_grid()
library(scales)
library(kableExtra)
library(ggplot2)
#Hold-out Validation
library(caTools)
#Data Correlation
library(GGally)
library(regclass)
#RMSE Calculation
library(Metrics)
#p-value for OLS model
library(broom)
#ncvTest
library(car)
# Convert all character data to factor
df.train.base <- read.csv('Train.csv', stringsAsFactors = TRUE)
# convert the ""'s to NA
df.train.base[df.train.base == ""] <- NA
# Clean data
df.train.base <- df.train.base %>%
# Ensure boolean variables are numeric
mutate(adwordsClickInfo.isVideoAd = as.numeric(adwordsClickInfo.isVideoAd) ) %>%
# Make sure dates are dates
mutate(date = as.Date(date),
visitStartTime = as_datetime(visitStartTime)
) %>%
# Ensure factor are factors
mutate(custId       = as.factor(custId),
sessionId    = as.factor(sessionId),
isMobile     = as.factor(isMobile),
isTrueDirect = as.factor(isTrueDirect),
newVisits    = as.factor(if_else(is.na(newVisits), 0, 1) ),
bounces      = as.factor(if_else(is.na(bounces),   0, 1)   ),
adwordsClickInfo.page      = as.factor(adwordsClickInfo.page),
adwordsClickInfo.isVideoAd = as.factor(adwordsClickInfo.isVideoAd)
)
df.train.base.numeric <- df.train.base %>%
# selecting all the numeric data
dplyr::select_if(is.numeric) %>%
# converting the data frame to tibble
as_tibble()
df.train.base.factor <- df.train.base %>%
#selecting all the numeric data
dplyr::select_if(is.factor) %>%
#converting the data frame to tibble
as_tibble()
# Function for data report
dataQualityReport <- function(df) {
# Function to remove any columns with NA
removeColsWithNA <- function(df) {
return( df[ , colSums(is.na(df)) == 0] )
}
# Create Comprehensive data report using skimr package
# This is done a bit piece-wise because PDF latex does not like the skimr package
# Very much. So Instead of printing `skim(df)`, I have to pull the contents manually
# Unfortunately. This is not an issue with html typically.
dataReport <- skim(df) %>%
rename_all(~str_replace(.,"skim_","")) %>%
arrange(type, desc(complete_rate) ) # sort data
# Filter to the class types
dataReport.numeric <- dataReport %>% filter(type == 'numeric') # numeric data
dataReport.factor  <- dataReport %>% filter(type == 'factor' ) # factor  data
# Remove columns that do not apply to this type of data -----------------------
## numeric data
dataReport.numeric <- removeColsWithNA(dataReport.numeric)  %>%
# Clean column names by removing numeric prefix,
rename_all(~str_replace(.,"numeric.",""))
## factor  data
dataReport.factor  <- removeColsWithNA(dataReport.factor ) %>%
# Clean column names by removing factor  prefix
rename_all(~str_replace(.,"factor.",""))
# Set up options for Display the reports
options(skimr_strip_metadata = FALSE)
options(digits=2)
options(scipen=99)
# Numeric report <- Get summary of data frame --------------------------------
# data frame stats
dfStats.num <- data.frame(Num_Numeric_Variables = ncol(df %>% select_if(is.numeric)),
Total_Observations    = nrow(df) )
# Now see individual column statistics
dfColStats.num <- dataReport.numeric %>%
dplyr::select(-type, -hist)
# Factor report <- Get summary of data frame --------------------------------
# Get summary of data frame
dfStats.factor <- data.frame(Num_Factor_Variables = ncol(df %>% select_if(is.factor)),
Total_Observations   = nrow(df) )
# Now see individual column statistics
dfColStats.factor <- dataReport.factor  %>%
dplyr::select(-type, -ordered)
# Return the data frames
return(list('dfStats.num'       = dfStats.num,
'dfColStats.num'    = dfColStats.num,
'dfStats.factor'    = dfStats.factor,
'dfColStats.factor' = dfColStats.factor))
}
# Get the factor and numeric reports
initialReport <- dataQualityReport(df.train.base)
# Numeric data frame stats
initialReport$dfStats.num %>% kable()
# Numeric column stats
initialReport$dfColStats.num %>%
kable() %>% kable_styling(font_size=7, latex_options = 'HOLD_position') # numeric data
# factor data frame stats
initialReport$dfStats.factor %>% kable()
# factor column stats
initialReport$dfColStats.factor %>%
kable() %>% kable_styling(font_size=7, latex_options = 'HOLD_position') # numeric data
# dataset by customer
df.train.base.byCustomer <- df.train.base %>%
group_by(across(sessionId)) %>%
summarise_if(is.numeric, sum)
# Get the outlier customers
revOutliers <- boxplot.stats(df.train.base.byCustomer[, 'revenue'])$out
# dataset by customer
df.train.base.byCustomer <- df.train.base %>%
group_by(across(sessionId)) %>%
summarise_if(is.numeric, sum)
# Get the outlier customers
revOutliers <- boxplot.stats(df.train.base.byCustomer[, 'revenue'])$out
View(df.train.base.byCustomer)
# dataset by customer
df.train.base.byCustomer <- df.train.base %>%
group_by(across(-sessionId)) %>%
summarise_if(is.numeric, sum)
# Get the outlier customers
revOutliers <- boxplot.stats(df.train.base.byCustomer[, 'revenue'])$out
View(df.train.base.byCustomer)
# dataset by customer
df.train.base.byCustomer <- df.train.base %>%
group_by(custID) %>%
summarise(custRevenue = sum(revenue))
# dataset by customer
df.train.base.byCustomer <- df.train.base %>%
group_by(custId) %>%
summarise(custRevenue = sum(revenue))
# Get the outlier customers
revOutliers <- boxplot.stats(df.train.base.byCustomer[, 'custRevenue'])$out
# Get the outlier customers
revOutliers <- boxplot.stats(df.train.base.byCustomer[, 'custRevenue'])$out
# Get the outlier customers
revOutliers <- boxplot.stats(df.train.base.byCustomer[, 'custRevenue'])$out
df.train.base.byCustomer %>%
# mutate(isOutlierCustomer = custRevenue %in% revOutliers) %>%
ggplot(aes(y = custRevenue,
x = '')) +
geom_boxplot() +
labs(title = 'Most customers do not spend anything at all',
subtitle = 'Data grouped by customer\n',
y = 'Revenue',
x = '',
caption = '\nTraining data only') +
theme_minimal() + theme(legend.position = 'bottom') #+
df.train.base.byCustomer %>%
# mutate(isOutlierCustomer = custRevenue %in% revOutliers) %>%
ggplot(aes(x = custRevenue)) +
geom_histogram(bins = 50) +
labs(title = 'Most customers do not spend anything at all',
subtitle = 'Data grouped by customer\n',
x = 'Revenue',
caption = '\nTraining data only') +
theme_minimal() + theme(legend.position = 'bottom') #+
df.train.base.byCustomer %>%
# mutate(isOutlierCustomer = custRevenue %in% revOutliers) %>%
ggplot(aes(x = custRevenue)) +
geom_histogram(bins = 100) +
labs(title = 'Most customers do not spend anything at all',
subtitle = 'Data grouped by customer\n',
x = 'Revenue',
caption = '\nTraining data only') +
theme_minimal() + theme(legend.position = 'bottom') #+
df.train.base.byCustomer %>%
# mutate(isOutlierCustomer = custRevenue %in% revOutliers) %>%
ggplot(aes(x = custRevenue)) +
geom_histogram(bins = 200) +
labs(title = 'Most customers do not spend anything at all',
subtitle = 'Data grouped by customer\n',
x = 'Revenue',
caption = '\nTraining data only') +
theme_minimal() + theme(legend.position = 'bottom') #+
# Show distribution of Revenue by customer
df.train.base.byCustomer %>%
ggplot(aes(y = custRevenue,
x = '')) +
geom_boxplot() +
labs(title = 'Most customers do not spend anything at all',
subtitle = 'Data grouped by customer\n',
y = 'Revenue',
x = '',
caption = '\nTraining data only') +
theme_minimal() + theme(legend.position = 'bottom')
# Show distribution of Revenue by customer
df.train.base.byCustomer %>%
ggplot(aes(y = custRevenue,
x = '')) +
geom_boxplot(alpha = 0.5) +
labs(title = 'Most customers do not spend anything at all',
subtitle = 'Data grouped by customer\n',
y = 'Revenue',
x = '',
caption = '\nTraining data only') +
theme_minimal() + theme(legend.position = 'bottom')
# Show distribution of Revenue by customer
df.train.base.byCustomer %>%
ggplot(aes(y = custRevenue,
x = '')) +
geom_boxplot(alpha = 0.33) +
labs(title = 'Most customers do not spend anything at all',
subtitle = 'Data grouped by customer\n',
y = 'Revenue',
x = '',
caption = '\nTraining data only') +
theme_minimal() + theme(legend.position = 'bottom')
knitr::opts_chunk$set(echo = TRUE)
# Packages --------
# Data Wrangling
library(tidyverse)
library(skimr)
library(lubridate) # dates
# Modeling
library(MASS)
library(caret) # Modeling variants like SVM
library(earth) # Modeling with Mars
library(pls)   # Modeling with PLS
library(glmnet) # Modeling with LASSO
library(VIM)
library(mice)
# Aesthetics
library(knitr)
library(cowplot)  # multiple ggplots on one plot with plot_grid()
library(scales)
library(kableExtra)
library(ggplot2)
library(inspectdf)
#Hold-out Validation
library(caTools)
#Data Correlation
library(GGally)
library(regclass)
#RMSE Calculation
library(Metrics)
#p-value for OLS model
library(broom)
#ncvTest
library(car)
# Convert all character data to factor
df.train.base <- read.csv('Train.csv', stringsAsFactors = TRUE)
# convert the ""'s to NA
df.train.base[df.train.base == ""] <- NA
# Clean data
df.train.base <- df.train.base %>%
# Ensure boolean variables are numeric
mutate(adwordsClickInfo.isVideoAd = as.numeric(adwordsClickInfo.isVideoAd) ) %>%
# Make sure dates are dates
mutate(date = as.Date(date),
visitStartTime = as_datetime(visitStartTime)
) %>%
# Ensure factor are factors
mutate(custId       = as.factor(custId),
sessionId    = as.factor(sessionId),
isTrueDirect = as.factor(isTrueDirect),
newVisits    = as.factor(if_else(is.na(newVisits), 0, 1) ),
bounces      = as.factor(if_else(is.na(bounces),   0, 1)   ),
adwordsClickInfo.page      = as.factor(adwordsClickInfo.page),
adwordsClickInfo.isVideoAd = as.factor(adwordsClickInfo.isVideoAd)
) %>%
dplyr::select(-c(
isMobile # This is contained in deviceCategory
))
#view(df.train.base)
df.train.base.numeric <- df.train.base %>%
# selecting all the numeric data
dplyr::select_if(is.numeric) %>%
# converting the data frame to tibble
as_tibble()
df.train.base.factor <- df.train.base %>%
#selecting all the numeric data
dplyr::select_if(is.factor) %>%
#converting the data frame to tibble
as_tibble()
# Function for data report
dataQualityReport <- function(df) {
# Function to remove any columns with NA
removeColsWithNA <- function(df) {
return( df[ , colSums(is.na(df)) == 0] )
}
# Create Comprehensive data report using skimr package
# This is done a bit piece-wise because PDF latex does not like the skimr package
# Very much. So Instead of printing `skim(df)`, I have to pull the contents manually
# Unfortunately. This is not an issue with html typically.
dataReport <- skim(df) %>%
rename_all(~str_replace(.,"skim_","")) %>%
arrange(type, desc(complete_rate) ) # sort data
# Filter to the class types
dataReport.numeric <- dataReport %>% filter(type == 'numeric') # numeric data
dataReport.factor  <- dataReport %>% filter(type == 'factor' ) # factor  data
# Remove columns that do not apply to this type of data -----------------------
## numeric data
dataReport.numeric <- removeColsWithNA(dataReport.numeric)  %>%
# Clean column names by removing numeric prefix,
rename_all(~str_replace(.,"numeric.",""))
## factor  data
dataReport.factor  <- removeColsWithNA(dataReport.factor ) %>%
# Clean column names by removing factor  prefix
rename_all(~str_replace(.,"factor.",""))
# Set up options for Display the reports
options(skimr_strip_metadata = FALSE)
options(digits=2)
options(scipen=99)
# Numeric report <- Get summary of data frame --------------------------------
# data frame stats
dfStats.num <- data.frame(Num_Numeric_Variables = ncol(df %>% select_if(is.numeric)),
Total_Observations    = nrow(df) )
# Now see individual column statistics
dfColStats.num <- dataReport.numeric %>%
dplyr::select(-type, -hist)
# Factor report <- Get summary of data frame --------------------------------
# Get summary of data frame
dfStats.factor <- data.frame(Num_Factor_Variables = ncol(df %>% select_if(is.factor)),
Total_Observations   = nrow(df) )
# Now see individual column statistics
dfColStats.factor <- dataReport.factor  %>%
dplyr::select(-type, -ordered)
# Return the data frames
return(list('dfStats.num'       = dfStats.num,
'dfColStats.num'    = dfColStats.num,
'dfStats.factor'    = dfStats.factor,
'dfColStats.factor' = dfColStats.factor))
}
# Get the factor and numeric reports
initialReport <- dataQualityReport(df.train.base)
# Numeric data frame stats
initialReport$dfStats.num %>% kable()
# Numeric column stats
initialReport$dfColStats.num %>%
kable() %>% kable_styling(font_size=7, latex_options = 'HOLD_position') # numeric data
# factor data frame stats
initialReport$dfStats.factor %>% kable()
# factor column stats
initialReport$dfColStats.factor %>%
kable() %>% kable_styling(font_size=7, latex_options = 'HOLD_position') # numeric data
# Transforming the revenue
transformed_revenue <- df.train.base %>%
group_by(custId) %>%
summarise(targetRevenue = log(sum(revenue)) + 1) %>%
ungroup()
hist(transformed_revenue$targetRevenue,
col = 'skyblue4',
main = 'Distribution of Target Revenue for each customer',
xlab = 'Target Revenue')
df.train.base %>%
ggplot(aes(x = fct_reorder(channelGrouping, desc(revenue) ),
y = revenue) ) +
# Boxplots
geom_boxplot(aes(color = channelGrouping), fill = 'lightsteelblue1', alpha = 0.7) +
coord_flip() +
# Theme, y scale format, and labels
theme_minimal() +
theme(panel.grid.major.x = element_blank()) +
#scale_y_continuous(labels = comma) +
labs(title = 'Distribution of Revenue by Different Online Store Channels',
subtitle = 'Ordered Descending by Revenue Generated by Channels',
x = 'Channels Used by Customers for Online Store',
y = 'Revenue Generated')
#
# # Step 1: Find missing and non-missing columns
#
# ## Column numbers of the predominately null catehorical data
# COL_NUM_REGION = 14
# COL_NUM_AD_LAST = 30
#
# # Uncomment to see the names of these columns if needed
# # names(df.train.base[, COL_NUM_REGION:COL_NUM_AD_IS_VIDEO])
#
# ## Identify columns with missing and non-missing data
# nonMissingColDataBegin <- df.train.base[, 1:(COL_NUM_REGION - 1)]
# missingColumnData      <- df.train.base[, COL_NUM_REGION:COL_NUM_AD_LAST]
# nonMissingColDataEnd   <- df.train.base[, (COL_NUM_AD_LAST + 1):ncol(df.train.base)]
#
# df.pmmImputed[missing,"y"] <- mice.impute.pmm( df.pmmImputed$y,
#                                               !df.pmmImputed$missing,
#                                                df.pmmImputed$x)
#
# # Step 2: Impute the categorical missing data
# dfKNN.imp <- kNN(missingColumnData, k=3)
#
# # Step 3: Rejoin the imputed categorical data into the original data
# df.train.clean <- cbind(nonMissingColData, dfKNN.imp, nonMissingColDataEnd) %>%
#
#   # Remove imputation T/F flags
#   dplyr::select(-ends_with('imp')
#
#                 # Remove single factor level columns
#                 # -c(adwordsClickInfo.isVideoAd, adwordsClickInfo.adNetworkType,
#                 #    adwordsClickInfo.slot, adwordsClickInfo.slot)
#                 )
#
# # Uncomment to See that the data is now 99.99% complete
# # skim(df.train.clean)
#
# # Step 4: drop a few remaining NA's
# df.train.clean <- df.train.clean %>% drop_na()
# Finally, transform the revenue
df.train.cleanTransformed <- df.train.base %>%
mutate(nLogRevenue = log(revenue + 1)) %>%
dplyr::select(-revenue)
df.train.cleanTransformed <- cbind(nLogRevenue = df.train.cleanTransformed$nLogRevenue, df.train.cleanTransformed)
fit.ols <- lm(nLogRevenue ~ ., data = df.train.cleanTransformed[1:20000, 1:(ncol(df.train.cleanTransformed) - 20)])
